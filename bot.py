import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from api import get_product_info
from config import logger, BOT_TOKEN
from states import Form
from utils import trainigs_calories

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher()

users = {}


@dp.message(Command('start'))
async def bot_start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞–ª–æ—Ä–∏–π –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã!\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã "/set_profile"'
    )


@dp.message(Command('help'))
async def get_help(message: types.Message):
    await message.answer(
        '–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤–æ–¥—ã, –µ–¥—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.\n'
        '–ù–∞–∂–º–∏—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n'
        '–í–Ω–æ—Å–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∫–æ–º–∞–Ω–¥–æ–π '
        '/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª>\n'
        '–í–Ω–æ—Å–∏—Ç–µ –µ–¥—É –∫–æ–º–∞–Ω–¥–æ–π /log_food <–ø—Ä–æ–¥—É–∫—Ç> <–≥—Ä–∞–º–º>\n'
        '–í–Ω–æ—Å–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /log_workout <—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞> '
        '<–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö>.\n'
        '–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /check_progress'
    )


@dp.message(Command('set_profile'))
async def set_profile(message: types.Message, state: FSMContext):
    global users
    user_id = message.from_user.id
    users[user_id] = {}
    await state.set_state(Form.weight)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:'
    )


@dp.message(Form.weight)
async def get_weight(message: types.Message, state: FSMContext):
    global users
    try:
        weight = float(message.text)
        if weight < 10 or weight >= 350:
            raise ValueError('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–µ—Å!')
        users[message.from_user.id]['weight'] = weight
        await state.update_data(weight=weight)
        await state.set_state(Form.height)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:')
    except ValueError:
        await message.answer(
            '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 10 –¥–æ 350!'
        )


@dp.message(Form.height)
async def get_height(message: types.Message, state: FSMContext):
    global users
    try:
        height = float(message.text)
        if height < 70 or height > 250:
            raise ValueError('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–æ—Å—Ç!')
        users[message.from_user.id]['height'] = height
        await state.update_data(height=height)
        await state.set_state(Form.age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
    except ValueError:
        await message.answer(
            '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 70 –¥–æ 250!'
        )


@dp.message(Form.age)
async def get_age(message: types.Message, state: FSMContext):
    global users
    try:
        age = int(message.text)
        if age < 5 or age > 130:
            raise ValueError('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!')
        users[message.from_user.id]['age'] = age
        await state.update_data(age=age)
        await state.set_state(Form.activity)
        await message.answer(
            '–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?'
        )
    except ValueError:
        await message.answer(
            '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 5 –¥–æ 130!'
        )


@dp.message(Form.activity)
async def get_activity(message: types.Message, state: FSMContext):
    try:
        activity = int(message.text)
        users[message.from_user.id]['activity'] = activity
        await state.update_data(activity=activity)
        await state.set_state(Form.city)
        await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:'
        )
    except ValueError:
        await message.answer(
            '–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º,'
            '–æ—Ç—Ä–∞–∂–∞—é—â–∏–º –º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å!'
        )


@dp.message(Form.city)
async def get_city(message: types.Message, state: FSMContext):
    city = message.text
    users[message.from_user.id]['city'] = city
    await state.update_data(city=city)
    await state.set_state(Form.calories)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip '
        '–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞'
    )


@dp.message(Form.calories)
async def get_calories(message: types.Message, state: FSMContext):
    if message.text == '/skip':
        data = await state.get_data()
        cal = (data.get('weight') * 10) + (data.get('height') * 6.25) - (
            data.get('age') * 5
        )
        await state.update_data(calories=cal)
    else:
        try:
            cal = int(message.text)
            await state.update_data(calories=cal)
        except ValueError:
            await message.answer(
                '–ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏–ª–æ–º!'
            )
    profile_data = await state.get_data()
    weight = profile_data.get("weight")
    height = profile_data.get("height")
    activity = profile_data.get("activity")
    bmi = weight / ((height / 100) ** 2)
    water_goal = weight * 30 + (activity / 30) * 500
    users[message.from_user.id]['water_goal'] = water_goal
    users[message.from_user.id]['calories_goal'] = cal
    await state.clear()
    await message.answer(
        f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n'
        f'–í–∞—à –≤–µ—Å: {weight} –∫–≥.\n'
        f'–í–∞—à —Ä–æ—Å—Ç: {height} —Å–º.\n'
        f'–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞: {bmi:.2f}.\n'
        f'–í–æ–∑—Ä–∞—Å—Ç: {profile_data.get("age")}.\n'
        f'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å—É—Ç–∫–∏: {profile_data.get("activity")} –º–∏–Ω.\n'
        f'–ì–æ—Ä–æ–¥: {profile_data.get("city")}.\n'
        f'–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {profile_data.get("calories")} –∫–∫–∞–ª.\n'
    )


@dp.message(Command('log_water'))
async def log_water(message: types.Message):
    global users
    try:
        amount = int(message.text.split()[1])
        user_id = message.from_user.id
        if user_id not in users:
            await message.answer(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å '
                '–∫–æ–º–∞–Ω–¥–æ–π /set_profile'
            )
        if 'logged_water' not in users[user_id]:
            users[user_id]['logged_water'] = amount
        else:
            users[user_id]['logged_water'] += amount
        water_to_do = users[
            user_id
        ]['water_goal'] - users[user_id]['logged_water']

        await message.answer(
            f'–ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: '
            f'{users[user_id]["logged_water"]} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
            f'–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {water_to_do:.1f} –º–ª.'
        )
    except (IndexError, ValueError):
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª: /log_water 250"
        )


@dp.message(Command('log_food'))
async def log_food(message: types.Message):
    global users
    try:
        query = message.text.split()
        prod_name = ' '.join(query[1:-1])
        weight = int(query[-1])
        product = await get_product_info(prod_name)
        user_id = message.from_user.id
        if product:
            cals = product['calories_100g'] * (weight / 100)
            if user_id not in users:
                await message.answer(
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π '
                    '–ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile'
                )
            if 'logged_calories' not in users[user_id]:
                users[user_id]['logged_calories'] = cals
            else:
                users[user_id]['logged_calories'] += cals

            cals_to_eat = users[
                user_id
            ]['calories_goal'] - users[user_id]['logged_calories']
            await message.answer(
                f"üçè {product['name']} ({weight} –≥) ‚Äî {cals:.1f} –∫–∫–∞–ª. "
                f"–í—Å–µ–≥–æ: {users[user_id]['logged_calories']:.1f} –∫–∫–∞–ª. "
                f"–û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å: "
                f"{max(cals_to_eat, 0):.1f} –∫–∫–∞–ª."
            )
        else:
            await message.answer(
                '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π'
            )
    except (IndexError, ValueError):
        message.answer(
            '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: \n'
            '/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π> '
            '<–º–∞—Å—Å–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)>'
        )


@dp.message(Command('log_workout'))
async def log_workout(message: types.Message):
    global users
    try:
        query = message.text.split()
        workout_name = ' '.join(query[1:-1]).lower()
        duration = int(query[-1])
        user_id = message.from_user.id
        if user_id not in users:
            await message.answer(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π '
                '–ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile'
            )
        water_loss = (duration / 30) * 200
        weight = users[user_id]['weight']
        users[user_id]['water_goal'] += water_loss
        if workout_name not in trainigs_calories:
            await message.answer(
                f'–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:'
                f' {", ".join(trainigs_calories.keys())}'
            )
        spent_calories = (duration / 60) * trainigs_calories[
            workout_name
        ] * weight

        if 'burned_calories' not in users[user_id]:
            users[user_id]['burned_calories'] = spent_calories
        else:
            users[user_id]['burned_calories'] += spent_calories

        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_name.capitalize()} ({duration} –º–∏–Ω) ‚Äî "
            f"{spent_calories:.1f} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ "
            f"{water_loss:.1f} –º–ª –≤–æ–¥—ã.\n"
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {users[user_id]['burned_calories']:.1f} –∫–∫–∞–ª."
        )
    except (IndexError, ValueError):
        await message.answer(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_workout <—Ç–∏–ø> <–≤—Ä–µ–º—è (–º–∏–Ω)>'
        )


@dp.message(Command('check_progress'))
async def get_progress(message: types.Message):
    global users
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /set_profile, '
            '—á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π'
        )
    water_goal = users[user_id].get('water_goal', 0)
    calories_goal = users[user_id].get('calories_goal', 0)
    logged_water = users[user_id].get('logged_water', 0)
    logged_calories = users[user_id].get('logged_calories', 0)
    burned_calories = users[user_id].get('burned_calories', 0)
    water_left = water_goal - logged_water
    cal_balance = calories_goal - logged_calories + burned_calories

    if cal_balance >= 0:
        text = f'–ë–∞–ª–∞–Ω—Å: {cal_balance:.1f} –∫–∫–∞–ª.'
    else:
        text = f'–ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –≤—ã —Å—ä–µ–ª–∏ –Ω–∞ {abs(cal_balance):.1f} –∫–∫–∞–ª –±–æ–ª—å—à–µ!'

    await message.answer(
        f'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n'
        f'–í–æ–¥–∞:\n'
        f'- –í—ã–ø–∏—Ç–æ {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n'
        f'- –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {water_left:.1f}.\n\n'
        f'–ö–∞–ª–æ—Ä–∏–∏:\n'
        f'- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories:.1f} –∫–∫–∞–ª –∏–∑ {calories_goal:.1f}'
        f' –∫–∫–∞–ª.\n'
        f'- –°–æ–∂–∂–µ–Ω–æ: {burned_calories:.1f} –∫–∫–∞–ª.\n'
        f'- {text}'
    )


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
